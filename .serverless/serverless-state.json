{
  "service": {
    "service": "aws-gux-crud",
    "serviceObject": {
      "name": "aws-gux-crud"
    },
    "provider": {
      "name": "aws",
      "runtime": "python3.10",
      "region": "sa-east-1",
      "stage": "dev",
      "memorySize": 128,
      "timeout": 30,
      "environment": {
        "TABLE_NAME": {
          "Ref": "GuxMainTable"
        }
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:DeleteItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:GetItem",
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:BatchWriteItem",
            "dynamodb:ListStreams",
            "dynamodb:GetRecords",
            "dynamodb:GetShardIterator",
            "dynamodb:DescribeStream"
          ],
          "Resource": [
            {
              "Fn::GetAtt": [
                "GuxMainTable",
                "Arn"
              ]
            },
            {
              "Fn::Sub": "${GuxMainTable.Arn}/index/*"
            },
            {
              "Fn::Sub": "${GuxMainTable.Arn}/stream/*"
            }
          ]
        }
      ],
      "httpApi": {
        "cors": {
          "allowedOrigins": [
            "https://*",
            "http://*"
          ],
          "allowedHeaders": [
            "*"
          ],
          "allowedMethods": [
            "GET",
            "POST",
            "PUT",
            "DELETE",
            "OPTIONS"
          ]
        },
        "authorizers": {
          "CopecOauth2Authorizer": {
            "type": "jwt",
            "identitySource": "$request.header.Authorization",
            "issuerUrl": "https://copec-sa.fusionauth.io",
            "audience": [
              "57358958-881b-4b05-a021-d1ae709b4da6",
              "8ae79912-a853-499b-b9d8-fba3610295ce"
            ]
          }
        }
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "ReadUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-gux-crud-dev-readUser"
            }
          },
          "ListUsersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-gux-crud-dev-listUsers"
            }
          },
          "CreateUsersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-gux-crud-dev-createUsers"
            }
          },
          "UpdateUsersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-gux-crud-dev-updateUsers"
            }
          },
          "SignInUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-gux-crud-dev-signInUser"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "aws-gux-crud",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-gux-crud-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-gux-crud-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "aws-gux-crud",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "ReadUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-gux-crud/dev/1690811718923-2023-07-31T13:55:18.923Z/aws-gux-crud.zip"
              },
              "Handler": "src/controllers/userController.read",
              "Runtime": "python3.10",
              "FunctionName": "aws-gux-crud-dev-readUser",
              "MemorySize": 128,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ReadUserLogGroup"
            ]
          },
          "ListUsersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-gux-crud/dev/1690811718923-2023-07-31T13:55:18.923Z/aws-gux-crud.zip"
              },
              "Handler": "src/controllers/userController.list",
              "Runtime": "python3.10",
              "FunctionName": "aws-gux-crud-dev-listUsers",
              "MemorySize": 128,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListUsersLogGroup"
            ]
          },
          "CreateUsersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-gux-crud/dev/1690811718923-2023-07-31T13:55:18.923Z/aws-gux-crud.zip"
              },
              "Handler": "src/controllers/userController.create",
              "Runtime": "python3.10",
              "FunctionName": "aws-gux-crud-dev-createUsers",
              "MemorySize": 128,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateUsersLogGroup"
            ]
          },
          "UpdateUsersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-gux-crud/dev/1690811718923-2023-07-31T13:55:18.923Z/aws-gux-crud.zip"
              },
              "Handler": "src/controllers/userController.update",
              "Runtime": "python3.10",
              "FunctionName": "aws-gux-crud-dev-updateUsers",
              "MemorySize": 128,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateUsersLogGroup"
            ]
          },
          "SignInUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-gux-crud/dev/1690811718923-2023-07-31T13:55:18.923Z/aws-gux-crud.zip"
              },
              "Handler": "src/controllers/userController.signin",
              "Runtime": "python3.10",
              "FunctionName": "aws-gux-crud-dev-signInUser",
              "MemorySize": 128,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SignInUserLogGroup"
            ]
          },
          "ReadUserLambdaVersionvOeovb2AApe9jIV5TIgZQs3SO3jGHtHE5kJOtNvIk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ReadUserLambdaFunction"
              },
              "CodeSha256": "b/sr6s7xHLjjb8krak4eGQDYfN3t9C3AQp/RyHXgMH8="
            }
          },
          "ListUsersLambdaVersionr5QgFa2ReWRLgaopj9C5EixclSQjZbp9hGLeXyg2I": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListUsersLambdaFunction"
              },
              "CodeSha256": "b/sr6s7xHLjjb8krak4eGQDYfN3t9C3AQp/RyHXgMH8="
            }
          },
          "CreateUsersLambdaVersionARtUf5jDQi6OoerZAoyFzSMe4rN4uZ1GCtL1WnqxJw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateUsersLambdaFunction"
              },
              "CodeSha256": "b/sr6s7xHLjjb8krak4eGQDYfN3t9C3AQp/RyHXgMH8="
            }
          },
          "UpdateUsersLambdaVersione2Xqq72LVg7cQfrXu20PN2PzLeF2wbVspWhSdVLO9IA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateUsersLambdaFunction"
              },
              "CodeSha256": "b/sr6s7xHLjjb8krak4eGQDYfN3t9C3AQp/RyHXgMH8="
            }
          },
          "SignInUserLambdaVersionIbbRbdFCbNZpMq65t8l7IDXVHtUL7P1L4HxlpoAtek": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SignInUserLambdaFunction"
              },
              "CodeSha256": "b/sr6s7xHLjjb8krak4eGQDYfN3t9C3AQp/RyHXgMH8="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-aws-gux-crud",
              "ProtocolType": "HTTP",
              "CorsConfiguration": {
                "AllowHeaders": [
                  "*"
                ],
                "AllowMethods": [
                  "GET",
                  "POST",
                  "PUT",
                  "DELETE",
                  "OPTIONS"
                ],
                "AllowOrigins": [
                  "https://*",
                  "http://*"
                ]
              }
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "HttpApiAuthorizerCopecOauth2Authorizer": {
            "Type": "AWS::ApiGatewayV2::Authorizer",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "Name": "CopecOauth2Authorizer",
              "IdentitySource": [
                "$request.header.Authorization"
              ],
              "AuthorizerType": "JWT",
              "JwtConfiguration": {
                "Audience": [
                  "57358958-881b-4b05-a021-d1ae709b4da6",
                  "8ae79912-a853-499b-b9d8-fba3610295ce"
                ],
                "Issuer": "https://copec-sa.fusionauth.io"
              }
            }
          },
          "ReadUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ReadUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationReadUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ReadUserLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetUser": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /user",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationReadUser"
                    }
                  ]
                ]
              },
              "AuthorizationType": "JWT",
              "AuthorizerId": {
                "Ref": "HttpApiAuthorizerCopecOauth2Authorizer"
              }
            },
            "DependsOn": "HttpApiIntegrationReadUser"
          },
          "ListUsersLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListUsersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationListUsers": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ListUsersLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetUsers": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /users",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationListUsers"
                    }
                  ]
                ]
              },
              "AuthorizationType": "JWT",
              "AuthorizerId": {
                "Ref": "HttpApiAuthorizerCopecOauth2Authorizer"
              }
            },
            "DependsOn": "HttpApiIntegrationListUsers"
          },
          "CreateUsersLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateUsersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateUsers": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateUsersLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostUser": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /user",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateUsers"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateUsers"
          },
          "UpdateUsersLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateUsersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateUsers": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateUsersLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutUserIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /user/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateUsers"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateUsers"
          },
          "SignInUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SignInUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationSignInUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"SignInUserLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostUserSignin": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /user/signin",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationSignInUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationSignInUser"
          },
          "GuxMainTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "GuxMainTable",
              "AttributeDefinitions": [
                {
                  "AttributeName": "PK",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "SK",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "GS1PK",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "PK",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "SK",
                  "KeyType": "RANGE"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "Model",
                  "KeySchema": [
                    {
                      "AttributeName": "GS1PK",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "SK",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-aws-gux-crud-dev-ServerlessDeploymentBucketName"
            }
          },
          "ReadUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ReadUserLambdaVersionvOeovb2AApe9jIV5TIgZQs3SO3jGHtHE5kJOtNvIk"
            },
            "Export": {
              "Name": "sls-aws-gux-crud-dev-ReadUserLambdaFunctionQualifiedArn"
            }
          },
          "ListUsersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListUsersLambdaVersionr5QgFa2ReWRLgaopj9C5EixclSQjZbp9hGLeXyg2I"
            },
            "Export": {
              "Name": "sls-aws-gux-crud-dev-ListUsersLambdaFunctionQualifiedArn"
            }
          },
          "CreateUsersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateUsersLambdaVersionARtUf5jDQi6OoerZAoyFzSMe4rN4uZ1GCtL1WnqxJw"
            },
            "Export": {
              "Name": "sls-aws-gux-crud-dev-CreateUsersLambdaFunctionQualifiedArn"
            }
          },
          "UpdateUsersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateUsersLambdaVersione2Xqq72LVg7cQfrXu20PN2PzLeF2wbVspWhSdVLO9IA"
            },
            "Export": {
              "Name": "sls-aws-gux-crud-dev-UpdateUsersLambdaFunctionQualifiedArn"
            }
          },
          "SignInUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SignInUserLambdaVersionIbbRbdFCbNZpMq65t8l7IDXVHtUL7P1L4HxlpoAtek"
            },
            "Export": {
              "Name": "sls-aws-gux-crud-dev-SignInUserLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-aws-gux-crud-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-aws-gux-crud-dev-HttpApiUrl"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "pythonRequirements": {
        "dockerizePip": "non-linux"
      }
    },
    "plugins": [
      "serverless-python-requirements"
    ],
    "pluginsData": {},
    "functions": {
      "readUser": {
        "handler": "src/controllers/userController.read",
        "events": [
          {
            "httpApi": {
              "path": "/user",
              "method": "GET",
              "authorizer": "CopecOauth2Authorizer"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/user"
          }
        ],
        "name": "aws-gux-crud-dev-readUser",
        "package": {},
        "memory": 128,
        "timeout": 30,
        "runtime": "python3.10",
        "vpc": {},
        "versionLogicalId": "ReadUserLambdaVersionvOeovb2AApe9jIV5TIgZQs3SO3jGHtHE5kJOtNvIk"
      },
      "listUsers": {
        "handler": "src/controllers/userController.list",
        "events": [
          {
            "httpApi": {
              "path": "/users",
              "method": "GET",
              "authorizer": "CopecOauth2Authorizer"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/users"
          }
        ],
        "name": "aws-gux-crud-dev-listUsers",
        "package": {},
        "memory": 128,
        "timeout": 30,
        "runtime": "python3.10",
        "vpc": {},
        "versionLogicalId": "ListUsersLambdaVersionr5QgFa2ReWRLgaopj9C5EixclSQjZbp9hGLeXyg2I"
      },
      "createUsers": {
        "handler": "src/controllers/userController.create",
        "events": [
          {
            "httpApi": {
              "path": "/user",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/user"
          }
        ],
        "name": "aws-gux-crud-dev-createUsers",
        "package": {},
        "memory": 128,
        "timeout": 30,
        "runtime": "python3.10",
        "vpc": {},
        "versionLogicalId": "CreateUsersLambdaVersionARtUf5jDQi6OoerZAoyFzSMe4rN4uZ1GCtL1WnqxJw"
      },
      "updateUsers": {
        "handler": "src/controllers/userController.update",
        "events": [
          {
            "httpApi": {
              "path": "/user/{id}",
              "method": "PUT"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/user/{id}"
          }
        ],
        "name": "aws-gux-crud-dev-updateUsers",
        "package": {},
        "memory": 128,
        "timeout": 30,
        "runtime": "python3.10",
        "vpc": {},
        "versionLogicalId": "UpdateUsersLambdaVersione2Xqq72LVg7cQfrXu20PN2PzLeF2wbVspWhSdVLO9IA"
      },
      "signInUser": {
        "handler": "src/controllers/userController.signin",
        "events": [
          {
            "httpApi": {
              "path": "/user/signin",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/user/signin"
          }
        ],
        "name": "aws-gux-crud-dev-signInUser",
        "package": {},
        "memory": 128,
        "timeout": 30,
        "runtime": "python3.10",
        "vpc": {},
        "versionLogicalId": "SignInUserLambdaVersionIbbRbdFCbNZpMq65t8l7IDXVHtUL7P1L4HxlpoAtek"
      }
    },
    "resources": {
      "Resources": {
        "GuxMainTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "GuxMainTable",
            "AttributeDefinitions": [
              {
                "AttributeName": "PK",
                "AttributeType": "S"
              },
              {
                "AttributeName": "SK",
                "AttributeType": "S"
              },
              {
                "AttributeName": "GS1PK",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "PK",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "SK",
                "KeyType": "RANGE"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "Model",
                "KeySchema": [
                  {
                    "AttributeName": "GS1PK",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "SK",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "aws-gux-crud",
      "frameworkVersion": "3",
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "/var/www/serverless/crud-serverless/.serverless/aws-gux-crud.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/aws-gux-crud/dev/1690811718923-2023-07-31T13:55:18.923Z",
    "artifact": "aws-gux-crud.zip"
  }
}